# -*- coding: utf-8 -*-
"""Movie_Recommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Poj_vMMqSMrY6PpFt_0mtVIvrk8C2xok

# **IMPORTING OF LIBRARIES**
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install surprise
# %matplotlib inline
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from ast import literal_eval
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.metrics.pairwise import linear_kernel, cosine_similarity
from nltk.stem.snowball import SnowballStemmer
from nltk.stem.wordnet import WordNetLemmatizer
from nltk.corpus import wordnet
from surprise.model_selection import cross_validate
from surprise import Reader, Dataset, SVD, NormalPredictor, KNNBasic, KNNWithMeans, KNNWithZScore, KNNBaseline, BaselineOnly, SVDpp, NMF, SlopeOne, CoClustering
import warnings; warnings.simplefilter('ignore')
import nltk
nltk.download('wordnet')

movies = pd.read_csv('movies_metadata.csv')
movies.head()

movies['genres'] = movies['genres'].fillna('[]').apply(literal_eval).apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])

movies.head()

movies['year'] = pd.to_datetime(movies['release_date'], errors='coerce').apply(lambda x: str(x).split('-')[0] if x != np.nan else np.nan)

movies.head()

links_small = pd.read_csv('links_small.csv')
links_small = links_small[links_small['tmdbId'].notnull()]['tmdbId'].astype('int')
links_small.head()

movies = movies.drop([19730, 29503, 35587])

movies['id'] = movies['id'].astype('int')

movies_links = movies[movies['id'].isin(links_small)]
movies_links.shape

"""## **VISUALIZATIONS**"""

movies_links['popularity'] = movies_links['popularity'].astype('float')

pop= movies_links.sort_values('popularity', ascending=False)
plt.figure(figsize=(12,4))

plt.barh(pop['title'].head(6),pop['popularity'].head(6), align='center',
        color='skyblue')
plt.gca().invert_yaxis()
plt.xlabel("Popularity")
plt.title("Popular Movies")

s = movies.apply(lambda x: pd.Series(x['genres']),axis=1).stack().reset_index(level=1, drop=True)
s.name = 'genre'
gen_md = movies.drop('genres', axis=1).join(s)

md_year = pd.DataFrame(gen_md.groupby('release_date').original_title.nunique())
md_year.head()

md_year.nlargest(5,'original_title')

md_year.plot.line(title = 'Movies made per year',color='DarkBlue',figsize=(10, 8));

md_genre = (pd.DataFrame(gen_md.groupby('genre').original_title.nunique())).sort_values('original_title', ascending=True)
md_genre.head(20)

md_genre['original_title'].plot.pie(title= 'Movies per Genre in %', figsize=(15,15), autopct='%1.1f%%',fontsize=15);

md_year_mean = gen_md.groupby('release_date').mean()
md_year_mean.head(3)

md_year_mean.nlargest(5,'vote_count')

md_year_mean[['vote_average', 'vote_count']].plot(title = 'TBD',color=('DarkBlue','c'),figsize=(15, 10),secondary_y=['vote_average']);

movies.corr(method='pearson')

movies.plot.scatter(x='vote_average', y='revenue',title='Revenue vs Vote Avg',color='DarkBlue',figsize=(6,5));

"""### **CONTENT RECOMMENDER 1**"""

movies_links['tagline'] = movies_links['tagline'].fillna('')
movies_links['description'] = movies_links['overview'] + movies_links['tagline']
movies_links['description'] = movies_links['description'].fillna('')

movies_links['description']

tf = TfidfVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')
tfidf_matrix = tf.fit_transform(movies_links['description'])

cosine_sim = cosine_similarity(tfidf_matrix)

cosine_sim

movies_links.head()

movies_links = movies_links.reset_index()
titles = movies_links['title']
indices = pd.Series(movies_links.index, index=movies_links['title'])

titles

def content_recommendations1(title):
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores,key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:31]
    movie_indices = [i[0] for i in sim_scores]
    return titles.iloc[movie_indices]

content_recommendations1('The Godfather').head(10)

content_recommendations1('Batman: Under the Red Hood').head(10)

"""***THE SECOND CONTENT RECOMMENDER***"""

credits = pd.read_csv('credits.csv')
keywords = pd.read_csv('keywords.csv')

keywords['id'] = keywords['id'].astype('int')
credits['id'] = credits['id'].astype('int')
movies['id'] = movies['id'].astype('int')

movies.shape

movies = movies.merge(credits, on='id')
movies = movies.merge(keywords, on='id')

movies_links = movies[movies['id'].isin(links_small)]
movies_links.shape

movies_links['cast'] = movies_links['cast'].apply(literal_eval)
movies_links['crew'] = movies_links['crew'].apply(literal_eval)
movies_links['keywords'] = movies_links['keywords'].apply(literal_eval)
movies_links['cast_size'] = movies_links['cast'].apply(lambda x: len(x))
movies_links['crew_size'] = movies_links['crew'].apply(lambda x: len(x))

def get_director(x):
    for i in x:
        if i['job'] == 'Director':
            return i['name']
    return np.nan

movies_links['director'] = movies_links['crew'].apply(get_director)

movies_links['cast'] = movies_links['cast'].apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])
movies_links['cast'] = movies_links['cast'].apply(lambda x: x[:3] if len(x) >=3 else x)

movies_links['keywords'] = movies_links['keywords'].apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])

movies_links['cast'] = movies_links['cast'].apply(lambda x: [str.lower(i.replace(" ", "")) for i in x])

movies_links['director'] = movies_links['director'].astype('str').apply(lambda x: str.lower(x.replace(" ", "")))
movies_links['director'] = movies_links['director'].apply(lambda x: [x,x, x])

movies_links.head(1)

s = movies_links.apply(lambda x: pd.Series(x['keywords']),axis=1).stack().reset_index(level=1, drop=True)
s.name = 'keyword'

s = s.value_counts()
sd = pd.DataFrame(s)

sd.head(10)

s = s[s > 1]

lemman = WordNetLemmatizer()

def filter_keywords(x):
    words = []
    for i in x:
        if i in s:
            words.append(i)
    return words

movies_links['keywords'] = movies_links['keywords'].apply(filter_keywords)
movies_links['keywords'] = movies_links['keywords'].apply(lambda x: [lemman.lemmatize(i) for i in x])
movies_links['keywords'] = movies_links['keywords'].apply(lambda x: [str.lower(i.replace(" ", "")) for i in x])

movies_links['combo'] = movies_links['keywords'] + movies_links['cast'] + movies_links['director'] + movies_links['genres']
movies_links['combo'] = movies_links['combo'].apply(lambda x: ' '.join(x))

count = CountVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')
bow = count.fit_transform(movies_links['combo'])

cosine_sim = cosine_similarity(bow)

movies_links = movies_links.reset_index()
titles = movies_links['title']
indices = pd.Series(movies_links.index, index=movies_links['title'])

def content_recommendations2(title):
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:26]
    movie_indices = [i[0] for i in sim_scores]
    
    movie = movies_links.iloc[movie_indices][['title', 'vote_count', 'vote_average', 'year']]
    vote_counts = movie[movie['vote_count'].notnull()]['vote_count'].astype('int')
    vote_averages = movie[movie['vote_average'].notnull()]['vote_average'].astype('int')
    C = vote_averages.mean()
    m = vote_counts.quantile(0.60)
    def weighted_rating(x):
        v = x['vote_count']
        R = x['vote_average']
        return (v/(v+m) * R) + (m/(m+v) * C)
    qualified = movie[(movie['vote_count'] >= m) & (movie['vote_count'].notnull()) & (movie['vote_average'].notnull())]
    qualified['vote_count'] = qualified['vote_count'].astype('int')
    qualified['vote_average'] = qualified['vote_average'].astype('int')
    qualified['wr'] = qualified.apply(weighted_rating, axis=1)
    qualified = qualified.sort_values('wr', ascending=False).head(10)
    return qualified

content_recommendations2('Inception')

content_recommendations2('Mean Girls')

"""***COLABORATIVE FILTERING***"""

reader = Reader()

ratings = pd.read_csv('ratings_small.csv')
ratings.head()

gb = ratings.groupby(['userId','movieId'])
gb.apply(lambda _df: _df.sort_values(by=['rating']))

data = Dataset.load_from_df(ratings[['userId', 'movieId', 'rating']], reader)

benchmark = []
# Iterate over all algorithms
for algorithm in [SVD(), SlopeOne(), NMF(), NormalPredictor(), KNNBasic(), KNNWithMeans(), KNNWithZScore(), CoClustering()]:
    # Perform cross validation
    results = cross_validate(algorithm, data, measures=['RMSE','MAE'], cv=10, verbose=True)
    
    # Get results & append algorithm name
    tmp = pd.DataFrame.from_dict(results).mean(axis=0)
    tmp = tmp.append(pd.Series([str(algorithm).split(' ')[0].split('.')[-1]], index=['Algorithm']))
    benchmark.append(tmp)

surprise_results = pd.DataFrame(benchmark).set_index('Algorithm').sort_values('test_rmse')
surprise_results

bench=pd.DataFrame(benchmark).sort_values('test_rmse')

sns.barplot(x='Algorithm',y='test_rmse',data=bench,label="Number of Words")
plt.xticks(rotation=90)
plt.show()

trainset = data.build_full_trainset()

svd = SVD()
svd.fit(trainset)

svd.predict(1, 302, 3)

def convert_int(x):
    try:
        return int(x)
    except:
        return np.nan

id_map = pd.read_csv('links_small.csv')[['movieId', 'tmdbId']]
id_map['tmdbId'] = id_map['tmdbId'].apply(convert_int)
id_map.columns = ['movieId', 'id']
id_map = id_map.merge(movies_links[['title', 'id']], on='id').set_index('title')

indices_map = id_map.set_index('id')

def hybrid(userId, title):
    idx = indices[title]
    tmdbId = id_map.loc[title]['id']
    
    movie_id = id_map.loc[title]['movieId']
    
    sim_scores = list(enumerate(cosine_sim[int(idx)]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:26]
    movie_indices = [i[0] for i in sim_scores]
    
    movies = movies_links.iloc[movie_indices][['title', 'vote_count', 'vote_average', 'year', 'id']]
    movies['est'] = movies['id'].apply(lambda x: svd.predict(userId, indices_map.loc[x]['movieId']).est)
    movies = movies.sort_values('est', ascending=False)
    return movies.head(10)

hybrid(1, 'Avatar')

hybrid(500, 'Avatar')

hybrid(1, 'Aliens')

hybrid(500, 'Aliens')